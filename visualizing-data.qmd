# **Visualizing Data**

There are many ways you can visualize data, and selecting a way to visualize your data depends on what kind of data you have. For example, if you have geographic data, then using a map can be an option. The visual you pick also should be effective at telling the story for your stakeholders.

For the different visualizations, I will group them based on what they show:

> -   **Distribution**
>
> -   **Comparison**
>
> -   **Relationship**
>
> -   **Composition**

## **Distributions**

For this group the visuals all show the audience information about a distribution.

### Density Plot

[Here](https://www.data-to-viz.com/graph/density.html) is a good resource that goes more in depth on density plots.

```{r message=FALSE, warning=FALSE}
# load in tidyverse package
library(tidyverse)

# create some random data
set.seed(0)

n = 10000

sample_means = rep(NA, n)

for(i in 1:n){
  sample_means[i] = mean(rnorm(20, mean=0, sd=2))
}

# save this data into a data frame 
sample_means_df <- data.frame(sample_means)

# create density plot 
sample_means_df %>%
   ggplot(aes(sample_means)) + 
   geom_density(size = .5) +
   labs(title = "Density Plot", x = "Sample Means", y = "Density") + 
   theme_classic()
  
```

```{r include=FALSE}
library(ggridges)
# create column one for df
set.seed(1)

n1 = 10000

sample_means = rep(NA, n)

for(i in 1:n){
  sample_means[i] = mean(rnorm(20, mean=0, sd=2))
}

sample_means1 <- data.frame(sample_means)
# create column two for df
set.seed(2)

n2 = 10000

sample_means = rep(NA, n)

for(i in 1:n){
  sample_means[i] = mean(rnorm(20, mean=0.5, sd=1.4))
}

sample_means2 <- data.frame(sample_means)

# create column three for df
set.seed(3)

n = 10000

sample_means = rep(NA, n)

for(i in 1:n){
  sample_means[i] = mean(rnorm(20, mean=-0.5, sd=1))
}

sample_means3 <- data.frame(sample_means) 

# prepare all 3 dfs to be combined into one

sample_means1 <- sample_means1 %>%
  mutate(sample_n = "S1")

sample_means2 <- sample_means2 %>%
  mutate(sample_n = "S2")

sample_means3 <- sample_means3 %>%
  mutate(sample_n = "S3")

samples_df <- sample_means1 %>%
  bind_rows(sample_means2) %>%
  bind_rows(sample_means3)
```

### Density Ridges

Using the `ggridges` package you can compare and see distributions together. [Click here](https://rdocumentation.org/packages/ggridges/versions/0.5.3) for the package documentation.

```{r}
# create density ridges with 3 randomly sampled distributions 
samples_df %>%
  ggplot(aes(x = sample_means, y = sample_n, fill = sample_n)) +
  geom_density_ridges(alpha = .7) + 
  labs(title = "Density Ridges Plot", x ="Sample Means", y = "Sample ID") +
  theme_classic()
```

### Histogram

Using a histogram is another common way to show a distribution. It may look like a "bar char" with many bars, however each "bar" is a bin, and it represents a range of numbers that falls within it's respective bin. The height of the "bar" shows a count of how many values fall within a bin.

```{r}
# create histogram with random data 
sample_means_df %>%
  ggplot(aes(x = sample_means)) +
  geom_histogram(bins = 30) +
  labs(title = "Histogram", y = "Count", x = "Sample Means") +
  theme_classic()
```

### Boxplot

Boxplots can be a useful way to show a distribution, but the distribution is hidden behind each box meaning it could be misinterpreted.

```{r}
# create boxplots with random data
samples_df %>%
  ggplot(aes(x = sample_n, y = sample_means, fill = sample_n)) +
  geom_boxplot() +
  labs(title = "Boxplot") +
  theme_classic()
```

### Violin Chart

Similar to a boxplot but shows the shape of a distribution better.

```{r}
# create violin charts with random data
samples_df %>%
  ggplot(aes(x = sample_n, y = sample_means, fill = sample_n)) +
  geom_violin() +
  labs(title = "Violin Chart") +
  theme_classic()
```

## **Comparisons**

For this group the visuals compare insights for the audience.

### Bar Chart

Bar charts are very simple and effective at conveying information, never underestimate the power of a bar chart.

```{r include=FALSE}
library(tidyverse)
library(janitor)
```

```{r warning=FALSE, message=FALSE}
# read in iris dataset 
iris_df <- iris %>%
  clean_names()

# group the data by species, then summarize the avg petal width for each species
iris_df %>% 
  group_by(species) %>%
  summarize(avg_petal_width = mean(petal_width)) %>%
  ggplot(aes(x = species, y = avg_petal_width, fill = species)) +
  geom_col() +
  labs(title = "Bar Chart", y = "Avg Petal Width", x = "Species") +
  theme_classic()

```

### Horizontal Bar Chart

Similar to a bar chart, but a horizontal version, can be useful but when viewing, stakeholders can more easily distinguish a difference in the vertical counterpart than in the horizontal bar chart. This is the same bar chart as above, created with `+ geom_col()` but to rotate the plot I used the `+ coord_flip()` function.

```{r}
# create horizontal bar chart
iris_df %>% 
  group_by(species) %>%
  summarize(avg_petal_width = mean(petal_width)) %>%
  ggplot(aes(x = species, y = avg_petal_width, fill = species)) +
  geom_col() +
  labs(title = "Horizontal Bar Chart", y = "Avg Petal Width", x = "Species") +
  theme_classic() +
  coord_flip()
```

### Line Chart

Line charts are essential when working time.

```{r warning=FALSE, message=FALSE}
# read in chickweight dataset
chick_df <- ChickWeight %>%
  clean_names()

# filter and group by chick 1, 21, 45
chick_df %>%
  filter(chick == 1|chick == 21|chick == 45) %>%
  group_by(chick) %>%
  ggplot(aes(x = time, y = weight, color = diet)) + 
  geom_line(size = .8) +
  labs(title = "Line Chart", x = "Time", y = "Chicken Weight") +
  theme_classic()
```

## **Relationships**

### Scatter Plot

Scatter Plots are great ways to visualize relationships within datasets. There are many different aesthetics you can control to add more layers to a scatter plot too.

This is an example of a simple scatter plot.

```{r warning=FALSE, message=FALSE}
# load in data
scatter_plot_df <- datasets::cars

# create scatter plot 
scatter_plot_df %>%
  ggplot(aes(x = dist, y = speed)) +
  geom_jitter() + 
  labs(title = "Simple Scatter Plot", y = "Speed", x = "Distance") +
  theme_classic()
```

A scatter plot with more layers can use aesthetics such as `size`, `fill`, `shape`, `geom_smooth()` or `facet_wrap()`.

```{r include=FALSE}
library(tidyverse)
library(gapminder)
```

```{r warning=FALSE, message=FALSE}
gapminder %>%
  group_by(country) %>%
  ggplot(aes(x = log(gdpPercap), y = lifeExp, col = year, size = pop)) +
  geom_point(alpha = .3) +
  geom_smooth(method = "lm") +
  facet_wrap(~continent) +
  labs(title = "Scatter Plot with more levels", x = "GDP Per Cap", y = "Life Expectancy") + 
  theme_minimal()
```

## **Composition**

### Pie Chart

Pie charts are useful when used properly, as a means of showing the composition categories etc. There should not be more than 5 items being displayed as it is hard to actualize the composition of something when there is lots of small pieces. 2-4 total "slices" is ideal for seeing how the data is made up for specific insights.

```{r message=FALSE, warning=FALSE}
library(formattable)

iris_df %>%
  group_by(species) %>%
  summarise(cnt = n()) %>%
  mutate(freq = formattable::percent(cnt / sum(cnt))) %>% 
  ggplot(aes(x = "", y = freq, fill = species)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  theme_void() +
  geom_text(aes(label = paste0(freq)), position = position_stack(vjust=0.5)) +
  labs(title = "Pie Chart")
```
