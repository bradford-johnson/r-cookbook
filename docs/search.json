[
  {
    "objectID": "visualizing-data.html",
    "href": "visualizing-data.html",
    "title": "4  Visualizing Data",
    "section": "",
    "text": "There are many ways you can visualize data, and selecting a way to visualize your data depends on what kind of data you have. For example, if you have geographic data, then using a map can be an option. The visual you pick also should be effective at telling the story for your stakeholders.\nFor the different visualizations, I will group them based on what they show:"
  },
  {
    "objectID": "visualizing-data.html#distributions",
    "href": "visualizing-data.html#distributions",
    "title": "4  Visualizing Data",
    "section": "4.1 Distributions",
    "text": "4.1 Distributions\nFor this group the visuals all show the audience information about a distribution.\n\n4.1.1 Density Plot\nHere is a good resource that goes more in depth on density plots.\n\n# load in tidyverse package\nlibrary(tidyverse)\n\n# create some random data\nset.seed(0)\n\nn = 10000\n\nsample_means = rep(NA, n)\n\nfor(i in 1:n){\n  sample_means[i] = mean(rnorm(20, mean=0, sd=2))\n}\n\n# save this data into a data frame \nsample_means_df <- data.frame(sample_means)\n\n# create density plot \nsample_means_df %>%\n   ggplot(aes(sample_means)) + \n   geom_density(size = .5) +\n   labs(title = \"Density Plot\", x = \"Sample Means\", y = \"Density\") + \n   theme_classic()\n\n\n\n\n\n\n4.1.2 Density Ridges\nUsing the ggridges package you can compare and see distributions together. Click here for the package documentation.\n\n# create density ridges with 3 randomly sampled distributions \nsamples_df %>%\n  ggplot(aes(x = sample_means, y = sample_n, fill = sample_n)) +\n  geom_density_ridges(alpha = .7) + \n  labs(title = \"Density Ridges Plot\", x =\"Sample Means\", y = \"Sample ID\") +\n  theme_classic()\n\nPicking joint bandwidth of 0.0467\n\n\n\n\n\n\n\n4.1.3 Histogram\nUsing a histogram is another common way to show a distribution. It may look like a “bar char” with many bars, however each “bar” is a bin, and it represents a range of numbers that falls within it’s respective bin. The height of the “bar” shows a count of how many values fall within a bin.\n\n# create histogram with random data \nsample_means_df %>%\n  ggplot(aes(x = sample_means)) +\n  geom_histogram(bins = 30) +\n  labs(title = \"Histogram\", y = \"Count\", x = \"Sample Means\") +\n  theme_classic()\n\n\n\n\n\n\n4.1.4 Boxplot\nBoxplots can be a useful way to show a distribution, but the distribution is hidden behind each box meaning it could be misinterpreted.\n\n# create boxplots with random data\nsamples_df %>%\n  ggplot(aes(x = sample_n, y = sample_means, fill = sample_n)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot\") +\n  theme_classic()\n\n\n\n\n\n\n4.1.5 Violin Chart\nSimilar to a boxplot but shows the shape of a distribution better.\n\n# create violin charts with random data\nsamples_df %>%\n  ggplot(aes(x = sample_n, y = sample_means, fill = sample_n)) +\n  geom_violin() +\n  labs(title = \"Violin Chart\") +\n  theme_classic()"
  },
  {
    "objectID": "visualizing-data.html#comparisons",
    "href": "visualizing-data.html#comparisons",
    "title": "4  Visualizing Data",
    "section": "4.2 Comparisons",
    "text": "4.2 Comparisons\nFor this group the visuals compare insights for the audience.\n\n4.2.1 Bar Chart\nBar charts are very simple and effective at conveying information, never underestimate the power of a bar chart.\n\n# read in iris dataset \niris_df <- iris %>%\n  clean_names()\n\n# group the data by species, then summarize the avg petal width for each species\niris_df %>% \n  group_by(species) %>%\n  summarize(avg_petal_width = mean(petal_width)) %>%\n  ggplot(aes(x = species, y = avg_petal_width, fill = species)) +\n  geom_col() +\n  labs(title = \"Bar Chart\", y = \"Avg Petal Width\", x = \"Species\") +\n  theme_classic()\n\n\n\n\n\n\n4.2.2 Horizontal Bar Chart\nSimilar to a bar chart, but a horizontal version, can be useful but when viewing, stakeholders can more easily distinguish a difference in the vertical counterpart than in the horizontal bar chart. This is the same bar chart as above, created with + geom_col() but to rotate the plot I used the + coord_flip() function.\n\n# create horizontal bar chart\niris_df %>% \n  group_by(species) %>%\n  summarize(avg_petal_width = mean(petal_width)) %>%\n  ggplot(aes(x = species, y = avg_petal_width, fill = species)) +\n  geom_col() +\n  labs(title = \"Horizontal Bar Chart\", y = \"Avg Petal Width\", x = \"Species\") +\n  theme_classic() +\n  coord_flip()\n\n\n\n\n\n\n4.2.3 Line Chart\nLine charts are essential when working time.\n\n# read in chickweight dataset\nchick_df <- ChickWeight %>%\n  clean_names()\n\n# filter and group by chick 1, 21, 45\nchick_df %>%\n  filter(chick == 1|chick == 21|chick == 45) %>%\n  group_by(chick) %>%\n  ggplot(aes(x = time, y = weight, color = diet)) + \n  geom_line(size = .8) +\n  labs(title = \"Line Chart\", x = \"Time\", y = \"Chicken Weight\") +\n  theme_classic()"
  },
  {
    "objectID": "visualizing-data.html#relationships",
    "href": "visualizing-data.html#relationships",
    "title": "4  Visualizing Data",
    "section": "4.3 Relationships",
    "text": "4.3 Relationships"
  },
  {
    "objectID": "visualizing-data.html#composition",
    "href": "visualizing-data.html#composition",
    "title": "4  Visualizing Data",
    "section": "4.4 Composition",
    "text": "4.4 Composition\n\n4.4.1 Pie Chart\nPie charts are useful when used properly, as a means of showing the composition categories etc. There should not be more than 5 items being displayed as it is hard to actualize the composition of something when there is lots of small pieces. 2-4 total “slices” is ideal for seeing how the data is made up for specific insights.\n\nlibrary(formattable)\n\nWarning: package 'formattable' was built under R version 4.1.3\n\niris_df %>%\n  group_by(species) %>%\n  summarise(cnt = n()) %>%\n  mutate(freq = formattable::percent(cnt / sum(cnt))) %>% \n  ggplot(aes(x = \"\", y = freq, fill = species)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\", start = 0) +\n  theme_void() +\n  geom_text(aes(label = paste0(freq)), position = position_stack(vjust=0.5)) +\n  labs(title = \"Pie Chart\")"
  }
]