# Cleaning Data

Cleaning data is one of the most important steps to any data analytics project. Cleaning data can involve anything from changing the case of characters from uppercase to lowercase to removing outliers from a data set, or even figuring out what to do with missing values. Having clean data is essential for making recommendations to stakeholders as your analysis can only be as strong as your data is clean. So very clean and structured data may lead you to entirely different insights than if you where to not clean it at all.

There are countless ways to clean your data in R, and I will show you different ways I have cleaned up data sets.

## Column Names (Headers)

However, first I think it is important to have clean and concise but descriptive headers, when dealing with tabular data. There have been many times where I load some data into R, and the headers are all uppercase, contain spaces, or something else that makes them annoying to work with. The `janitor` package is great because it can help clean up the headers (or column names) so they are easier to work with. I will load in the `readr` package to import a hand crafted `.csv` that I made as an example. I will load in the `dplyr` package so I can pipe the data into functions.

```{r warning=FALSE,message=FALSE,error=FALSE}
# load packages
library(janitor)
library(readr)
library(dplyr)

# read in csv with no changes
dirty_df <- read_csv('janitor-example.csv')

# read in csv but with janitor and dplyr functions
clean_df <- read_csv('janitor-example.csv') %>%
  clean_names() %>%
  mutate(weather_condition = w_ea_th_er_conditions) %>%
  mutate(avg_temp_f = temp_f) %>%
  mutate(weekday = day_of_the_week) %>%
  select(weekday, avg_temp_f, weather_condition)
```

Here is how both the original data frame and cleaned look.

```{r}
# head()
dirty_df %>% 
  head()

clean_df %>%
  head()
```
